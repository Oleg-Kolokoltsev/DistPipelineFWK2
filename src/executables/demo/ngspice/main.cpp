//
// Created by morrigan on 3/10/19.
//

#include <iostream>
#include <string>
#include <regex>
#include <thread>

#include <ngspice/sharedspice.h>

//TODO: embed resources into executable
//Example: https://github.com/Johnnyborov/ResourceManager

using namespace std;

// Callback functions called by NgSpice thread

/*
 * callback function for reading printf, fprintf, fput (NULL allowed)
 */
int getchar_cb(char* outputreturn, int ident, void* userdata){
    string msg(outputreturn);
    if(!msg.find("stderr")){
        cerr << regex_replace(msg, regex("stderr"), "") << endl;
    }else{
        cout << regex_replace(msg, regex("stdout"), "") << endl;
    }
    return 0;
}

/*
 * callback function for reading status string and percent value (NULL allowed)
 */
int getstat_cb(char* outputreturn, int ident, void* userdata){
    string msg(outputreturn);
    //cout << msg << endl;
    return 0;
}

/*
 * callback function for transferring a flag to caller, generated by ngspice
 * upon a call to function controlled_exit. (required)
 */
int exit_cb(int exitstatus, bool immediate, bool quitexit, int ident, void* userdata)
{
    cout << "exit_cb" << endl;
    return 0;
}

/*
 * callback function for sending an array of structs containing data values of all
 * vectors in the current plot (simulation output) (NULL allowed)
 */
int data_cb(pvecvaluesall vdata, int numvecs, int ident, void* userdata)
{
    //return 0;
    cout << "data_cb: "
    << "numvecs = " << numvecs
    << ", veccount = " << vdata->veccount
            << ", vecindex = " << vdata->vecindex << endl;
    for(int i = 0; i < vdata->veccount; i++){
        cout << string(vdata->vecsa[i]->name)
        << " = {" << vdata->vecsa[i]->creal << ","
        << vdata->vecsa[i]->cimag << "}" << endl;
    }
    return 0;
}

/*
 * callback function for sending an array of structs containing info on all vectors in the
 * current "plot" (immediately before simulation starts) (NULL allowed)
 */
int initdata_cb(pvecinfoall intdata, int ident, void* userdata)
{
    cout << "\n\nINIT DATA" << endl;
    cout << "name: " << string(intdata->name) << endl;
    cout << "title: " << string(intdata->title) << endl;
    cout << "date: " << string(intdata->date) << endl;
    cout << "type: " << string(intdata->type) << endl;

    cout << "vectors: ";
    for(int i = 0; i < intdata->veccount; i++){
        cout << string(intdata->vecs[i]->vecname) << " ";
    }
    cout << "\n\n";

    return 0;
}

/*
 * callback function for sending a boolean signal (true if thread is running)(NULL allowed)
 */
int thread_runs_cb(bool noruns, int ident, void* userdata){
    cout << "thread_runs_cb" << endl;
    return 0;
}

int main(int argc, char** argv){

    //register callbacks
    ngSpice_Init(getchar_cb, getstat_cb, exit_cb, data_cb, initdata_cb, thread_runs_cb, nullptr);

    //TODO: ... resources!!!
    ngSpice_Command("source /home/morrigan/CLionProjects/DistPipelineFWK2/src/executables/demo/ngspice/rc.cir");
    ngSpice_Command("bg_run");

    //While the background thread is running,ngspice will reject any other command sent by ngSpice_Command
    ngSpice_Command("bg_halt");
    this_thread::sleep_for(chrono::milliseconds(200));

    ngSpice_Command("quit");

    ngSpice_Command("bg_resume");

    while( ngSpice_running())
        this_thread::sleep_for(chrono::milliseconds(200));

    return 0;
}

